"""Add custom profile fields and Imini ID for v3.9

Revision ID: 0b2fafe6b6ce
Revises: 
Create Date: 2025-07-29 18:44:50.579117

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0b2fafe6b6ce'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('shop_items')
    op.drop_table('user_events')
    op.drop_table('secret_unlocks')
    op.drop_table('user_jobs')
    op.drop_table('user_giftcodes')
    op.drop_table('minigames')
    op.drop_table('audit_logs')
    op.drop_table('user_quests')
    op.drop_table('daily_quests')
    op.drop_table('thank_logs')
    op.drop_table('trivia_questions')
    op.drop_table('giftcodes')
    op.drop_table('trust_logs')
    op.drop_table('chaos_stats')
    op.drop_table('shop_meta')
    op.drop_table('jobs')
    op.drop_table('events')
    op.create_foreign_key(None, 'inventory', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('user_achievements_ach_key_fkey'), 'user_achievements', type_='foreignkey')
    op.create_foreign_key(None, 'user_achievements', 'achievements', ['ach_key'], ['key'])
    op.create_foreign_key(None, 'user_achievements', 'users', ['user_id'], ['id'])
    op.add_column('users', sa.Column('imini_id', sa.String(length=10), nullable=True))
    op.add_column('users', sa.Column('custom_avatar_url', sa.String(), nullable=True))
    op.add_column('users', sa.Column('about_me', sa.String(length=250), nullable=True))
    op.add_column('users', sa.Column('custom_status', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('vibe_text', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('profile_is_private', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('ingame_role', sa.String(), nullable=True))
    op.alter_column('users', 'level',
               existing_type=sa.BIGINT(),
               nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('users', 'items',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.create_unique_constraint(None, 'users', ['imini_id'])
    op.drop_column('users', 'last_deposit')
    op.drop_column('users', 'ribbon')
    op.drop_column('users', 'pending_streak_charge')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('pending_streak_charge', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('ribbon', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_deposit', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.alter_column('users', 'items',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('users', 'level',
               existing_type=sa.BIGINT(),
               nullable=True,
               existing_server_default=sa.text('1'))
    op.drop_column('users', 'ingame_role')
    op.drop_column('users', 'profile_is_private')
    op.drop_column('users', 'vibe_text')
    op.drop_column('users', 'custom_status')
    op.drop_column('users', 'about_me')
    op.drop_column('users', 'custom_avatar_url')
    op.drop_column('users', 'imini_id')
    op.drop_constraint(None, 'user_achievements', type_='foreignkey')
    op.drop_constraint(None, 'user_achievements', type_='foreignkey')
    op.create_foreign_key(op.f('user_achievements_ach_key_fkey'), 'user_achievements', 'achievements', ['ach_key'], ['key'], ondelete='CASCADE')
    op.drop_constraint(None, 'inventory', type_='foreignkey')
    op.create_table('events',
    sa.Column('key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('goal', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reward_coin', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('reward_xp', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('reward_role', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reward_badge', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ends_at', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('key', name=op.f('events_pkey'))
    )
    op.create_table('jobs',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('base_pay', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mastery_req', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='jobs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('shop_meta',
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('key', name=op.f('shop_meta_pkey'))
    )
    op.create_table('chaos_stats',
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('wins', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('losses', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('high_score', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('updated_at', sa.BIGINT(), server_default=sa.text('(EXTRACT(epoch FROM now()))::bigint'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name=op.f('chaos_stats_pkey'))
    )
    op.create_table('trust_logs',
    sa.Column('giver_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('receiver_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('giver_id', 'receiver_id', name=op.f('trust_logs_pkey'))
    )
    op.create_table('giftcodes',
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('coin', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('items', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('max_usage', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=True),
    sa.Column('per_user_cooldown', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('creator_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('allowed_user_ids', postgresql.ARRAY(sa.BIGINT()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('code', name=op.f('giftcodes_pkey'))
    )
    op.create_table('trivia_questions',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('options', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('trivia_questions_pkey'))
    )
    op.create_table('thank_logs',
    sa.Column('sender_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('receiver_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('sender_id', 'receiver_id', name=op.f('thank_logs_pkey'))
    )
    op.create_table('daily_quests',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('quest', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('special', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('date', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('required', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reward_coin', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('reward_xp', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('daily_quests_pkey'))
    )
    op.create_table('user_quests',
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('quest_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('period', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('progress', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('req', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reward_coin', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('reward_xp', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('completed_at', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', 'quest_key', name=op.f('user_quests_pkey'))
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_logs_pkey'))
    )
    op.create_table('minigames',
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('total_played', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_wins', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('longest_streak', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('current_streak', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_game', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name=op.f('minigames_pkey'))
    )
    op.create_table('user_giftcodes',
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('used_at', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', 'code', name=op.f('user_giftcodes_pkey'))
    )
    op.create_table('user_jobs',
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('job_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('mastery', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('job_skills', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], name=op.f('user_jobs_job_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'job_id', name=op.f('user_jobs_pkey'))
    )
    op.create_table('secret_unlocks',
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('unlock_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('unlocked_at', sa.BIGINT(), server_default=sa.text('(EXTRACT(epoch FROM now()))::bigint'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', 'unlock_key', name=op.f('secret_unlocks_pkey'))
    )
    op.create_table('user_events',
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('event_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('claimed_at', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', 'event_key', name=op.f('user_events_pkey'))
    )
    op.create_table('shop_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('available', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('rarity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('featured', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('emoji', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('shop_items_pkey'))
    )
    # ### end Alembic commands ###
