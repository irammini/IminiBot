# cogs/giftcode.py

import time
import random
import string

import nextcord
from nextcord.ext import commands
from sqlalchemy import select, func
from sqlalchemy.exc import SQLAlchemyError

from shared.db import AsyncSession
from shared.models.giftcode import GiftCode, UserGiftCode
from shared.models.user import User
from shared.models.inventory import Inventory
from shared.utils.embed import make_embed

class GiftCodeCog(commands.Cog):
    """üéÅ GiftCode: creategift (dev), redeemcode, mygiftcode."""

    DEV_IDS = [1064509322228412416, 1327287076122787940, 1204490429727244301]

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    def _gen_code(self, length=8):
        return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

    @commands.command(name="creategift")
    async def create_gift(self, ctx: commands.Context,
                          code: str = "",
                          coin: int = None,
                          items: str = "",
                          usages: int = None,
                          expires: int = None,
                          target_ids: str = ""):
        """üîß !creategift CODE COIN [items_csv] [usages] [expires_ts] [allowed_ids_csv]"""
        if ctx.author.id not in self.DEV_IDS:
            return await ctx.send(embed=make_embed(desc="‚ùå Kh√¥ng quy·ªÅn.", color=nextcord.Color.red()))

        # Ki·ªÉm tra code
        code = code.strip().upper()
        if not code:
            return await ctx.send(embed=make_embed(
                desc="‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p CODE (kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng).", color=nextcord.Color.orange()))

        # Ki·ªÉm tra coin
        if coin is None:
            return await ctx.send(embed=make_embed(
                desc="‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p s·ªë coin (kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng).", color=nextcord.Color.orange()))
        try:
            coin = int(coin)
        except Exception:
            return await ctx.send(embed=make_embed(
                desc="‚ö†Ô∏è Coin ph·∫£i l√† s·ªë nguy√™n.", color=nextcord.Color.orange()))
        if coin < 0:
            return await ctx.send(embed=make_embed(
                desc="‚ö†Ô∏è Coin ph·∫£i >= 0.", color=nextcord.Color.orange()))

        # Ki·ªÉm tra usages (n·∫øu nh·∫≠p)
        if usages is not None:
            try:
                usages = int(usages)
                if usages < 1:
                    return await ctx.send(embed=make_embed(
                        desc="‚ö†Ô∏è usages ph·∫£i >= 1 ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ kh√¥ng gi·ªõi h·∫°n.", color=nextcord.Color.orange()))
            except Exception:
                return await ctx.send(embed=make_embed(
                    desc="‚ö†Ô∏è usages ph·∫£i l√† s·ªë nguy√™n ho·∫∑c ƒë·ªÉ tr·ªëng.", color=nextcord.Color.orange()))
        # Ki·ªÉm tra expires (n·∫øu nh·∫≠p)
        if expires is not None:
            try:
                expires = int(expires)
                if expires < 0:
                    return await ctx.send(embed=make_embed(
                        desc="‚ö†Ô∏è expires ph·∫£i >= 0 ho·∫∑c ƒë·ªÉ tr·ªëng.", color=nextcord.Color.orange()))
            except Exception:
                return await ctx.send(embed=make_embed(
                    desc="‚ö†Ô∏è expires ph·∫£i l√† s·ªë nguy√™n ho·∫∑c ƒë·ªÉ tr·ªëng.", color=nextcord.Color.orange()))

        item_list = [i.strip() for i in items.split(",") if i.strip()]
        allowed_ids = [int(i.strip()) for i in target_ids.split(",") if i.strip()] if target_ids else None

        async with self.bot.sessionmaker() as session:
            exists = await session.get(GiftCode, code)
            if exists:
                return await ctx.send(embed=make_embed(desc="‚ö†Ô∏è Code ƒë√£ t·ªìn t·∫°i.", color=nextcord.Color.orange()))

            # Validate: item t·ªìn t·∫°i (n·∫øu c√≥)
            from shared.models.item import Item
            for item_id in item_list:
                item = await session.get(Item, item_id)
                if not item:
                    return await ctx.send(embed=make_embed(
                        desc=f"‚ö†Ô∏è Item `{item_id}` kh√¥ng t·ªìn t·∫°i.", color=nextcord.Color.orange()))

            gc = GiftCode(
                code=code,
                coin=coin,
                items=item_list,
                expires_at=expires,
                max_usage=usages,
                creator_id=ctx.author.id,
                allowed_user_ids=allowed_ids
            )

            session.add(gc)
            await session.commit()

        desc = f"‚úÖ GiftCode t·∫°o: **{code}**\nü™ô {coin} coin\nüéÅ {', '.join(item_list) or 'Kh√¥ng c√≥ item'}"
        if usages:
            desc += f"\nüîÑ D√πng ƒë∆∞·ª£c: {usages} l·∫ßn"
        else:
            desc += "\nüîÑ Kh√¥ng gi·ªõi h·∫°n l∆∞·ª£t d√πng"
        if expires:
            desc += f"\n‚è≥ H·∫øt h·∫°n: <t:{expires}:R>"
        else:
            desc += "\n‚è≥ Kh√¥ng gi·ªõi h·∫°n th·ªùi gian"
        if allowed_ids:
            desc += f"\nüîí Ch·ªâ d√πng cho: {', '.join(str(i) for i in allowed_ids)}"
        await ctx.send(embed=make_embed(desc=desc, color=nextcord.Color.green()))

    @commands.command(name="listcode")
    async def list_code(self, ctx: commands.Context):
        """üóÇÔ∏è !listcode ‚Äî Li·ªát k√™ t·∫•t c·∫£ giftcode (dev only)"""
        if ctx.author.id not in self.DEV_IDS:
            return await ctx.send(embed=make_embed(desc="‚ùå Kh√¥ng quy·ªÅn.", color=nextcord.Color.red()))
        async with self.bot.sessionmaker() as session:
            codes = (await session.execute(select(GiftCode))).scalars().all()
        if not codes:
            return await ctx.send(embed=make_embed(desc="üì≠ Kh√¥ng c√≥ giftcode n√†o.", color=nextcord.Color.dark_gray()))
        lines = []
        for c in codes:
            status = "‚úÖ" if c.enabled else "‚ùå"
            lines.append(f"{status} `{c.code}` ‚Äî {c.coin}ü™ô, {', '.join(c.items) or 'no item'}, max: {c.max_usage or '‚àû'}")
        await ctx.send(embed=make_embed(title="üóÇÔ∏è Danh s√°ch GiftCode", desc="\n".join(lines), color=nextcord.Color.blue()))

    @commands.command(name="editcode")
    async def edit_code(self, ctx: commands.Context, code: str, field: str, *, value: str):
        """‚úèÔ∏è !editcode CODE FIELD VALUE ‚Äî S·ª≠a giftcode (dev only)"""
        if ctx.author.id not in self.DEV_IDS:
            return await ctx.send(embed=make_embed(desc="‚ùå Kh√¥ng quy·ªÅn.", color=nextcord.Color.red()))
        async with self.bot.sessionmaker() as session:
            gc = await session.get(GiftCode, code.upper())
            if not gc:
                return await ctx.send(embed=make_embed(desc="‚ùå Code kh√¥ng t·ªìn t·∫°i.", color=nextcord.Color.red()))
            try:
                if field == "coin":
                    gc.coin = int(value)
                elif field == "items":
                    gc.items = [i.strip() for i in value.split(",") if i.strip()]
                elif field == "max_usage":
                    gc.max_usage = int(value) if value.isdigit() else None
                elif field == "expires_at":
                    gc.expires_at = int(value) if value.isdigit() else None
                elif field == "enabled":
                    gc.enabled = value.lower() in ("1", "true", "yes", "on", "enable")
                elif field == "allowed_user_ids":
                    gc.allowed_user_ids = [int(i.strip()) for i in value.split(",") if i.strip()]
                else:
                    return await ctx.send(embed=make_embed(desc="‚ö†Ô∏è Field kh√¥ng h·ª£p l·ªá.", color=nextcord.Color.orange()))
                await session.commit()
                await ctx.send(embed=make_embed(desc=f"‚úÖ ƒê√£ s·ª≠a `{field}` cho code `{code}`.", color=nextcord.Color.green()))
            except Exception as e:
                await session.rollback()
                await ctx.send(embed=make_embed(desc=f"‚ùå L·ªói khi s·ª≠a: {e}", color=nextcord.Color.red()))

    @commands.command(name="deletecode")
    async def delete_code(self, ctx: commands.Context, code: str):
        """üóëÔ∏è !deletecode CODE ‚Äî X√≥a giftcode (dev only)"""
        if ctx.author.id not in self.DEV_IDS:
            return await ctx.send(embed=make_embed(desc="‚ùå Kh√¥ng quy·ªÅn.", color=nextcord.Color.red()))
        async with self.bot.sessionmaker() as session:
            gc = await session.get(GiftCode, code.upper())
            if not gc:
                return await ctx.send(embed=make_embed(desc="‚ùå Code kh√¥ng t·ªìn t·∫°i.", color=nextcord.Color.red()))
            await session.delete(gc)
            await session.commit()
        await ctx.send(embed=make_embed(desc=f"üóëÔ∏è ƒê√£ x√≥a code `{code}`.", color=nextcord.Color.green()))

    @commands.command(name="redeemcode")
    async def redeem_code(self, ctx: commands.Context, code: str):
        """üé´ !redeemcode <code> ‚Äî d√πng giftcode."""
        now = int(time.time())
        async with self.bot.sessionmaker() as session:
            try:
                gc = await session.get(GiftCode, code.upper())
                if not gc or not gc.enabled:
                    return await ctx.send(embed=make_embed(desc="‚ùå Code kh√¥ng t·ªìn t·∫°i.", color=nextcord.Color.red()))
                if gc.expires_at and now > gc.expires_at:
                    return await ctx.send(embed=make_embed(desc="‚åõ Code ƒë√£ h·∫øt h·∫°n.", color=nextcord.Color.orange()))
                if gc.allowed_user_ids and ctx.author.id not in gc.allowed_user_ids:
                    return await ctx.send(embed=make_embed(desc="üö´ M√£ n√†y kh√¥ng d√†nh cho b·∫°n.", color=nextcord.Color.red()))

                total = await session.scalar(
                    select(func.count()).select_from(UserGiftCode).where(UserGiftCode.code == code)
                )
                if total >= gc.max_usage:
                    return await ctx.send(embed=make_embed(desc="‚ùå Code ƒë√£ h·∫øt l∆∞·ª£t.", color=nextcord.Color.red()))

                used = await session.get(UserGiftCode, (ctx.author.id, code))
                if used:
                    return await ctx.send(embed=make_embed(desc="ü™´ B·∫°n ƒë√£ d√πng m√£ n√†y r·ªìi.", color=nextcord.Color.dark_gray()))

                user = await session.get(User, ctx.author.id)
                if not user:
                    user = User(id=ctx.author.id)
                    session.add(user)

                # Th∆∞·ªüng coin
                if gc.coin:
                    user.wallet = (user.wallet or 0) + gc.coin

                # Th∆∞·ªüng item
                from shared.models.item import Item
                for it in gc.items or []:
                    item = await session.get(Item, it)
                    if not item:
                        await session.rollback()
                        return await ctx.send(embed=make_embed(desc=f"üéÅ Item `{it}` kh√¥ng t·ªìn t·∫°i.", color=nextcord.Color.red()))
                    inv = await session.get(Inventory, (ctx.author.id, it))
                    if inv:
                        inv.amount += 1
                    else:
                        session.add(Inventory(user_id=ctx.author.id, item_id=it, amount=1))

                session.add_all([user, UserGiftCode(user_id=ctx.author.id, code=code, used_at=now)])
                await session.commit()

                txt = f"üéâ Redeem th√†nh c√¥ng: +{gc.coin} ü™ô"
                if gc.items:
                    txt += "\n" + " ".join(f"üéÅ `{i}`" for i in gc.items)
                await ctx.send(embed=make_embed(desc=txt, color=nextcord.Color.green()))
            except Exception as e:
                await session.rollback()
                await ctx.send(embed=make_embed(desc=f"‚ùå L·ªói khi redeem: {e}", color=nextcord.Color.red()))

    @commands.command(name="mygiftcode")
    async def my_giftcode(self, ctx: commands.Context):
        """üìú !mygiftcode ‚Äî xem m√£ b·∫°n ƒë√£ d√πng."""
        async with self.bot.sessionmaker() as session:
            rows = await session.execute(
                select(UserGiftCode.code, UserGiftCode.used_at)
                .where(UserGiftCode.user_id == ctx.author.id)
            )
            data = rows.all()

        if not data:
            return await ctx.send(embed=make_embed(desc="ü™´ B·∫°n ch∆∞a d√πng m√£ n√†o.", color=nextcord.Color.dark_gray()))

        lines = [f"üé´ `{code}` ‚Äî <t:{used}:R>" for code, used in data]
        await ctx.send(embed=make_embed(title="üìú L·ªãch s·ª≠ Redeem", desc="\n".join(lines), color=nextcord.Color.blue()))

def setup(bot: commands.Bot):
    bot.add_cog(GiftCodeCog(bot))