# cogs/utils.py

import time
import random
import datetime

import nextcord
from nextcord.ext import commands
from sqlalchemy import select, func
from sqlalchemy.exc import SQLAlchemyError

from shared.db import AsyncSession
from shared.models.user import User
from shared.utils.embed import make_embed

# --------------- Constants & Config ---------------

# Dev IDs (c√≥ th·ªÉ load t·ª´ bot.config)
DEV_IDS = [1064509322228412416, 1327287076122787940]

# Spam‚Äêguard thresholds
SPAM_WINDOW   = 10    # seconds
SPAM_LIMIT    = 5     # commands
SPAM_CHANCE   = 0.3   # 30% chance to reply
SPAM_REPLIES = [
    "Bot ƒëang th·ªü, ƒë·ª£i x√≠u ƒëi‚Ä¶",
    "Nghi·ªán l·ªánh r·ªìi √†? Chill t√≠ n√†o!",
    "B·ªõt spam ƒëi!",
    "Ch·∫≠m l·∫°i ƒëi, ƒë·ª´ng l√†m bot m·ªát.",
    "B√¨nh tƒ©nh n√†o, spam nhi·ªÅu l√†m g√¨!"
]

# --------------- Pagination View ---------------

class HelpPageView(nextcord.ui.View):
    """Multi‚Äêpage navigation for embeds via buttons."""
    def __init__(self, embeds: list[nextcord.Embed], timeout: float = 60):
        super().__init__(timeout=timeout)
        self.embeds = embeds
        self.index  = 0

    @nextcord.ui.button(label="‚óÄÔ∏è", style=nextcord.ButtonStyle.secondary)
    async def prev_page(self, button, interaction):
        self.index = (self.index - 1) % len(self.embeds)
        await interaction.response.edit_message(embed=self.embeds[self.index], view=self)

    @nextcord.ui.button(label="üìò", style=nextcord.ButtonStyle.primary, disabled=True)
    async def center(self, *_): 
        pass

    @nextcord.ui.button(label="‚ñ∂Ô∏è", style=nextcord.ButtonStyle.secondary)
    async def next_page(self, button, interaction):
        self.index = (self.index + 1) % len(self.embeds)
        await interaction.response.edit_message(embed=self.embeds[self.index], view=self)

# --------------- Utils Cog ---------------

class UtilsCog(commands.Cog):
    """üß∞ Bot utilities: help, info, status, leaderboard, spam‚Äêguard."""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.start_time = datetime.datetime.now(datetime.timezone.utc)
        self._spam: dict[int, list[float]] = {}

    # ---------- Spam guard ----------
    @commands.Cog.listener()
    async def track_command_spam(bot, self, ctx: commands.Context):
        now = time.time()
        arr = [t for t in self._spam.get(ctx.author.id, []) if now - t < SPAM_WINDOW]
        arr.append(now)
        self._spam[ctx.author.id] = arr

        if len(arr) > SPAM_LIMIT and random.random() < SPAM_CHANCE:
            await ctx.send(random.choice(SPAM_REPLIES), delete_after=5)

    # ---------- Help command ----------
    @commands.command(name="bothelp")
    async def bothelp(self, ctx: commands.Context):
        """üìñ Hi·ªÉn th·ªã danh s√°ch l·ªánh & h∆∞·ªõng d·∫´n"""
        pages: list[nextcord.Embed] = []

        # Page 1: Command list
        e1 = make_embed(title="üìñ IminiBot Help (v3.8)", color=nextcord.Color.teal())
        e1.add_field(name="üíº Job & Skills",
                    value="`i!setjob`, `i!job`, `i!work`, `i!skills`, `i!upgrade_skill`",
                    inline=False)
        e1.add_field(name="üéÆ Minigame",
                    value="`i!oneshot`, `i!inverseguess`, `i!burncoin`, `i!spill`",
                    inline=False)
        e1.add_field(name="üß† Quiz",
                    value="`i!quiz`, `i!speedrunquiz`",
                    inline=False)
        e1.add_field(name="üí∞ Economy",
                    value="`i!daily`, `i!coinflip`, `i!beg`, `i!crime`, `i!give`, `i!pray`, `i!repay`, `i!deposit`, `i!withdraw`",
                    inline=False)
        e1.add_field(name="üõçÔ∏è Shop & Items",
                    value="`i!shop`, `i!sell`, `i!fish`, `i!trash`, `i!inventory`, `i!use`",
                    inline=False)
        e1.add_field(name="üìú Quest & Giftcode",
                    value="`i!quest`, `i!complete`, `i!mygiftcode`, `i!redeemcode`",
                    inline=False)
        e1.add_field(name="üéñÔ∏è Achievement",
                    value="`i!achievements`, `i!achievementkeys`",
                    inline=False)
        e1.add_field(name="üë§ Profile & Social",
                    value="`i!profile`, `i!trust`, `i!setflex`, `i!unsetflex`, `i!shoutout`",
                    inline=False)
        e1.add_field(name="üß™ BETA Features",
                    value="`i!previewcard`, `i!cardstyle`, `i!setframe`, `i!setcolor`, `i!settheme`, `C√≤n n·ªØa...`",
                    inline=False)
        pages.append(e1)

        # Page 2: Quiz guide
        quiz_desc = (
            "**üéÆ C√°ch ch∆°i Quiz:**\n"
            "D√πng `i!quiz`, ch·ªçn ƒë·ªô kh√≥ b·∫±ng emoji, tr·∫£ l·ªùi 5 c√¢u h·ªèi b·∫±ng c√°ch g√µ s·ªë (1‚Äì4).\n\n"
            "**üìà M·ªü kh√≥a ƒë·ªô kh√≥:**\n"
            "üü¢ Easy: m·∫∑c ƒë·ªãnh m·ªü\n"
            "üîµ Normal: th·∫Øng 10 l·∫ßn Easy\n"
            "üî¥ Hard: th·∫Øng 50 l·∫ßn Normal\n"
            "‚ö´ Extreme: th·∫Øng 500 l·∫ßn Hard\n"
            "‚ùó Nightmare: th·∫Øng 1000 l·∫ßn Extreme\n\n"
            "**‚è±Ô∏è Speedrun:** D√πng `i!speedrunquiz` ƒë·ªÉ ch∆°i Easy li√™n t·ª•c, ghi streak cao nh·∫•t.\n"
            "**üèÖ Th√†nh t√≠ch:** M·ªói c·∫•p quiz c√≥ badge ri√™ng khi ho√†n th√†nh ƒë·ªß s·ªë l·∫ßn th·∫Øng."
        )
        e2 = make_embed(title="üìò H∆∞·ªõng d·∫´n Quiz", desc=quiz_desc, color=nextcord.Color.blue())
        pages.append(e2)

        # Page 3: Job & Skill guide
        job_desc = (
            "**üíº Job System:**\n"
            "D√πng `!setjob` ƒë·ªÉ ch·ªçn ngh·ªÅ, `!work` ƒë·ªÉ l√†m vi·ªác nh·∫≠n xu.\n\n"
            "**üß† Skills:**\n"
            "M·ªói job c√≥ skill ri√™ng, n√¢ng c·∫•p b·∫±ng `!upgrade_skill`, xem b·∫±ng `!skills`.\n"
            "Khi ƒë·ªß mastery ‚Üí m·ªü hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát ho·∫∑c badge ngh·ªÅ."
        )
        e3 = make_embed(title="üìò H∆∞·ªõng d·∫´n Job & Skill", desc=job_desc, color=nextcord.Color.green())
        pages.append(e3)

        # Page 4: Hidden & Curse
        hidden_desc = (
            "**üß™ Hidden Trigger:**\n"
            "`C√≥ c√°c l·ªánh ·∫©n ng·∫´u nhi√™n ‚Äî c√≥ th·ªÉ m·ªü badge ho·∫∑c ph·∫£n h·ªìi k·ª≥ qu·∫∑c.\n\n"
            "**üï≥Ô∏è Curse Emoji:**\n"
            "Spam emoji nh∆∞ `üï≥Ô∏è` sau 5 l·ªánh kh√°c nhau ‚Üí c√≥ th·ªÉ b·ªã h·ªá th·ªëng soi v√† m·ªü badge ·∫©n.\n"
            "Kh√¥ng c√≥ l·ªánh tra c·ª©u ‚Äî ch·ªâ c√≥ h√†nh vi b·ªã ghi nh·∫≠n."
        )
        e4 = make_embed(title="üìò H·ªá th·ªëng ·∫©n & l·ªùi nguy·ªÅn", desc=hidden_desc, color=nextcord.Color.dark_grey())
        pages.append(e4)

        await ctx.send(embed=pages[0], view=HelpPageView(pages))

    # ---------- Bot info ----------
    @commands.command(name="botinfo")
    async def botinfo(self, ctx: commands.Context):
        """‚ÑπÔ∏è Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n v·ªÅ bot."""
        uptime = datetime.datetime.now(datetime.timezone.utc) - self.start_time
        embed = make_embed(title="‚ÑπÔ∏è IminiBot Info", color=nextcord.Color.dark_blue())
        embed.add_field(name="üì¶ Version",
                        value=self.bot.config.get("version", "3.8"),
                        inline=True)
        embed.add_field(name="‚è±Ô∏è Uptime",
                        value=str(uptime).split('.')[0],
                        inline=True)
        embed.add_field(name="üõ†Ô∏è Owner",
                        value="irammini",
                        inline=True)
        embed.add_field(name="üìö Servers",
                        value=str(len(self.bot.guilds)),
                        inline=True)
        total_users = sum(g.member_count or 0 for g in self.bot.guilds)
        embed.add_field(name="üë• Total Users",
                        value=str(total_users),
                        inline=True)
        await ctx.send(embed=embed)

    # ---------- Status (dev only) ----------
    @commands.command(name="status")
    async def status(self, ctx: commands.Context, detail: str = None):
        bot = self.bot
        """üß≠ Dev-only: gi√°m s√°t bot & th·ªëng k√™ DB."""
        if ctx.author.id not in DEV_IDS:
            return await ctx.send(embed=make_embed(
                desc="‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.", color=nextcord.Color.red()
            ), delete_after=5)

        now = datetime.datetime.now(datetime.timezone.utc)
        uptime = now - self.start_time
        embed = make_embed(title="üß≠ System Monitor", color=nextcord.Color.blurple())
        embed.add_field(name="‚è±Ô∏è Uptime",
                        value=str(uptime).split('.')[0],
                        inline=False)
        embed.add_field(name="üõ∏ Servers",
                        value=str(len(self.bot.guilds)),
                        inline=True)

        total_users = sum(g.member_count or 0 for g in self.bot.guilds)
        embed.add_field(name="üë• Users",
                        value=str(total_users),
                        inline=True)

        commands_used = getattr(self.bot, "command_counter", {}).get("total", 0)
        embed.add_field(name="üß† Commands Used",
                        value=str(commands_used),
                        inline=False)

        cogs_status = "\n".join(f"`{n}`: üü¢ Active" for n in self.bot.cogs)
        embed.add_field(name="üìÇ Cogs",
                        value=cogs_status or "-",
                        inline=False)

        if detail == "detail":
            try:
                async with bot.sessionmaker() as session:
                    total_u = await session.scalar(select(func.count(User.id)))
                    total_coin = await session.scalar(select(func.sum(User.wallet)))
                    total_voice = await session.scalar(select(func.sum(User.voice_time)))
                embed.add_field(name="üìä DB Users",
                                value=str(total_u),
                                inline=True)
                embed.add_field(name="ü™ô Total Coins",
                                value=str(total_coin or 0),
                                inline=True)
                embed.add_field(name="üé§ Total Voice Time",
                                value=f"{(total_voice or 0)/3600:.1f}h",
                                inline=True)
            except SQLAlchemyError:
                embed.add_field(name="‚ö†Ô∏è DB Error",
                                value="Kh√¥ng th·ªÉ truy v·∫•n",
                                inline=False)

        await ctx.send(embed=embed)

    # ---------- Leaderboard ----------
    @commands.command(name="leaderboard")
    async def leaderboard(self, ctx: commands.Context, category: str = "cash"):
        bot = self.bot
        """
        üèÜ !leaderboard <metric> ‚Äî xem top 10.
        Metrics: cash, level, voicetime, streak
        """
        METRICS = {
            "cash":     (User.wallet,    "ü™ô Wallet"),
            "level":    (User.level,     "‚≠ê Level"),
            "voicetime":(User.voice_time,"üé§ Voice Time"),
            "streak":   (User.streak,    "üî• Streak")
        }
        if category not in METRICS:
            return await ctx.send(embed=make_embed(
                desc="‚ùå Metric kh√¥ng h·ª£p l·ªá, c√°c metric c√≥ s·∫µn l√† cash, level, voicetime v√† streak.", color=nextcord.Color.red()
            ), delete_after=5)

        col, label = METRICS[category]
        try:
            async with bot.sessionmaker() as session:
                rows = await session.execute(
                    select(User.id, col).order_by(col.desc()).limit(10)
                )
                top = rows.all()
        except SQLAlchemyError:
            return await ctx.send(embed=make_embed(
                desc="‚ùå L·ªói DB.", color=nextcord.Color.red()
            ))

        if not top:
            return await ctx.send(embed=make_embed(
                desc="üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.", color=nextcord.Color.dark_gray()
            ))

        text = "\n".join(f"{i+1}. <@{uid}> ‚Äî {val}" for i, (uid, val) in enumerate(top))
        await ctx.send(embed=make_embed(
            title=f"üèÜ Top {label}", desc=text, color=nextcord.Color.gold()
        ))

# --------------- Setup ---------------

def setup(bot: commands.Bot):
    bot.add_cog(UtilsCog(bot))