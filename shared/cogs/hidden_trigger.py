import nextcord
from nextcord.ext import commands
from shared.utils.embed import make_embed
from shared.utils.decorators import with_achievements
from shared.utils.achievement import award
from shared.models.user import User

HIDDEN_RESPONSES = {
    "mirror": ("B·∫°n th·∫•y ch√≠nh m√¨nh...", nextcord.Color.teal()),
    "echo":   (None,                     nextcord.Color.teal()),
    "meow":   ("Meow meow! üò∫",         nextcord.Color.purple()),
    "unlocked": ("üîì B·∫°n m·ªü kh√≥a quest ·∫©n!", nextcord.Color.green()),
}

class HiddenTriggerCog(commands.Cog):
    """üîí L·ªánh ·∫©n: mirror, echo, meow, unlock"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.Cog.listener()
    async def track_command_spam(self, ctx):
        print(f"üî• L·ªánh v·ª´a ƒë∆∞·ª£c g·ªçi: {ctx.command}")
    
    async def _get_user(self, uid: int) -> User:
        async with self.bot.sessionmaker() as sess:
            user = await sess.get(User, uid)
            return user
        
    async def _save_user(self, user: User):
        async with self.bot.sessionmaker() as sess:
            sess.add(user)
            await sess.commit()

    @commands.command()
    @with_achievements("mirror")
    async def mirror(self, ctx: commands.Context):
        """ü™û !mirror ‚Äî g√µ c√†ng nhi·ªÅu l·∫ßn c√†ng l·ªách ch√≠nh m√¨nh."""

        uid = ctx.author.id

        # l·∫•y user & templog t·ª´ DB (lu√¥n reload b·∫£n m·ªõi)
        async with self.bot.sessionmaker() as sess:
            user = await sess.get(User, uid)
            templog = user.templog or {}

            count = templog.get("mirror_count", 0) + 1
            templog["mirror_count"] = count
            user.templog = templog

            sess.add(user)
            await sess.commit()

        # b·∫£ng ph·∫£n h·ªìi theo trigger
        TRIGGERS = {
            3:  "ü™û G∆∞∆°ng b·∫Øt ƒë·∫ßu rung nh·∫π.",
            5:  "ü™û H√¨nh ·∫£nh b·∫°n b·ªã l·ªách kh·ªèi kh√¥ng gian hi·ªán t·∫°i.",
            7:  "ü™û B·∫°n kh√¥ng c√≤n l√† b·∫°n n·ªØa...",
            10: "ü™û M·ªôt b·∫£n th·ªÉ kh√°c m·ªâm c∆∞·ªùi t·ª´ ph√≠a g∆∞∆°ng.",
            15: "ü™û G∆∞∆°ng kh√¥ng c√≤n ph·∫£n chi·∫øu √°nh s√°ng‚Ä¶ ch·ªâ ph·∫£n ·ª©ng.",
            25: "ü™û B·∫°n c·∫£m th·∫•y b·ªã quan s√°t. T·ª´ ph√≠a g∆∞∆°ng?",
            30: "ü™û B·∫°n kh√¥ng th·ªÉ ki·ªÉm so√°t b·∫£n th·ªÉ ph·∫£n chi·∫øu n·ªØa.",
            50: "ü™û G∆∞∆°ng ƒë√£ nh·∫≠n di·ªán b·∫°n.",
        }

        extra = TRIGGERS.get(count, "")

        # m·ªëc ƒë·∫∑c bi·ªát
        if count == 50:
            await award(self.bot, uid, "mirrorloop")
        elif count == 66:
            await ctx.send(embed=make_embed(
                desc="Haha... B·∫°n v·∫´n ti·∫øp t·ª•c soi ch√≠nh m√¨nh?",
                color=nextcord.Color.dark_grey()
            ))
        elif count == 100:
            await ctx.send(embed=make_embed(
                desc="ü™û ...G∆∞∆°ng bi·∫øn m·∫•t. ƒê·ªÉ l·∫°i t·∫•m g∆∞∆°ng nh·ªè.",
                color=nextcord.Color.greyple()
            ))
        elif count > 100:
            await ctx.send(embed=make_embed(
                desc="B·∫°n th·∫•y ch√≠nh m√¨nh, lu√¥n lu√¥n l√† v·∫≠y m√†?",
                color=nextcord.Color.greyple()
            ))
            return

        # ph·∫£n h·ªìi ch√≠nh
        txt, col = HIDDEN_RESPONSES.get("mirror", ("B·∫°n th·∫•y ch√≠nh m√¨nh...", nextcord.Color.greyple()))
        await ctx.send(embed=make_embed(
            desc=f"{txt}\n{extra}",
            color=col
        ))

    @commands.command()
    @with_achievements("echo")
    async def echo(self, ctx: commands.Context, *, content: str):
        _, col = HIDDEN_RESPONSES["echo"]
        await ctx.send(embed=make_embed(desc=content, color=col))

    @commands.command()
    @with_achievements("meow")
    async def meow(self, ctx: commands.Context):
        txt, col = HIDDEN_RESPONSES["meow"]
        await ctx.send(embed=make_embed(desc=txt, color=col))

    @commands.command()
    @with_achievements("unlock")
    async def unlocksmth(bot, self, ctx: commands.Context):
        txt, col = HIDDEN_RESPONSES["unlocked"]
        await ctx.send(embed=make_embed(desc=txt, color=col))

def setup(bot: commands.Bot):
    bot.add_cog(HiddenTriggerCog(bot))