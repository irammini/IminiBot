import time
import nextcord
from nextcord.ext import commands
from sqlalchemy import select
from shared.db import AsyncSession
from shared.models.social import TrustLog, ThankLog
from shared.models.user import User
from shared.models.quest import UserQuest
from shared.utils.embed import make_embed
from shared.utils.decorators import with_achievements

class SocialCog(commands.Cog):
    """ü§ù Trust, Thank, Karma, Shoutout"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.Cog.listener()
    async def track_command_spam(self, ctx):
        print(f"üî• L·ªánh v·ª´a ƒë∆∞·ª£c g·ªçi: {ctx.command}")

    @commands.command(name="trust")
    @with_achievements("trust")
    async def cmd_trust(self, ctx: commands.Context, member: nextcord.Member):
        bot = self.bot
        """ü§ù !trust <user> ‚Äî t·∫∑ng 1 trust point."""
        uid = ctx.author.id
        if member.id == uid:
            return await ctx.send(embed=make_embed(
                desc="‚ùå Kh√¥ng th·ªÉ t·ª± trust.", color=nextcord.Color.red()
            ))

        now = int(time.time())
        async with bot.sessionmaker() as session:
            giver = await session.get(User, uid) or User(id=uid)
            if now - (giver.created_at or 0) < 30*24*3600:
                return await ctx.send(embed=make_embed(
                    desc="üö´ Acc ph·∫£i ‚â•30 ng√†y m·ªõi trust.", color=nextcord.Color.orange()
                ))
            exists = await session.get(TrustLog, (uid, member.id))
            if exists:
                return await ctx.send(embed=make_embed(
                    desc="‚ö†Ô∏è B·∫°n ƒë√£ trust ng∆∞·ªùi n√†y r·ªìi.", color=nextcord.Color.orange()
                ))
            session.add(TrustLog(giver_id=uid, receiver_id=member.id, timestamp=now))
            tgt = await session.get(User, member.id) or User(id=member.id)
            tgt.trust_points = (tgt.trust_points or 0) + 1
            session.add(tgt)

            # Update daily_trust quest progress
            row = await session.execute(
                select(UserQuest).where(
                    UserQuest.user_id == uid,
                    UserQuest.quest_key == "daily_trust",
                    UserQuest.period == "daily",
                    UserQuest.completed == False
                )
            )
            uq: UserQuest | None = row.scalar_one_or_none()
            if uq:
                uq.progress += 1
                if uq.progress >= uq.req:
                    uq.completed = True
                    uq.completed_at = now
                session.add(uq)

            await session.commit()

        await ctx.send(embed=make_embed(
            desc=f"‚úÖ B·∫°n ƒë√£ trust {member.mention}", color=nextcord.Color.green()
        ))

    @commands.command(name="shoutout")
    @with_achievements("shoutout")
    async def cmd_shoutout(self, ctx: commands.Context, channel: nextcord.TextChannel, *, msg: str):
        """üì£ !shoutout <#channel> <message> ‚Äî qu·∫£ng b√° (y√™u c·∫ßu level 50)."""
        bot = self.bot
        uid = ctx.author.id

        # Ki·ªÉm tra level
        async with bot.sessionmaker() as session:
            user = await session.get(User, uid) or User(id=uid)
            if (user.level or 1) < 50:
                return await ctx.send(embed=make_embed(
                    desc="üö´ B·∫°n c·∫ßn ƒë·∫°t **level 50** m·ªõi ƒë∆∞·ª£c s·ª≠ d·ª•ng l·ªánh n√†y.",
                    color=nextcord.Color.red()
                ))

        await channel.send(embed=make_embed(
            title="üì£ Shoutout!", desc=f"{ctx.author.mention} n√≥i:\n> {msg}", color=nextcord.Color.orange()
        ))
        await ctx.send(embed=make_embed(
            desc=f"‚úÖ Shoutout t·ªõi {channel.mention}", color=nextcord.Color.green()
        ))

def setup(bot: commands.Bot):
    bot.add_cog(SocialCog(bot))