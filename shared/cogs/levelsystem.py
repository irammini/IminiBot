# cogs/levelsystem.py

import time
import math
import logging
import datetime

import nextcord
from nextcord.ext import commands
from sqlalchemy import update, select
from sqlalchemy.exc import SQLAlchemyError
from shared.models.achievement import UserAchievement

from shared.db import AsyncSession
from shared.models.user import User
from shared.utils.embed import make_embed

logger = logging.getLogger(__name__)
LEVEL_UP_CHANNEL_ID = 0  # ‚ñ∂Ô∏è Thay ID channel th√¥ng b√°o level up

class LevelSystemCog(commands.Cog):
    """üìà H·ªá th·ªëng Level, XP, Voice, Streak & Flex Badge"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.last_msg_ts: dict[int, float] = {}
        self.voice_start: dict[int, float] = {}

    @commands.Cog.listener()
    async def track_command_spam(self, ctx):
        print(f"üî• L·ªánh v·ª´a ƒë∆∞·ª£c g·ªçi: {ctx.command}")

    @commands.Cog.listener()
    async def on_message(self, message: nextcord.Message):
        if message.author.bot or not message.guild:
            return

        uid = message.author.id
        now = time.time()

        # 60s cooldown ki·∫øm XP
        if now - self.last_msg_ts.get(uid, 0) < 60:
            return
        self.last_msg_ts[uid] = now

        try:
            async with self.bot.sessionmaker() as session:
                user = await session.get(User, uid) or User(id=uid)
                user.level = user.level or 1  # ƒë·∫£m b·∫£o kh√¥ng None
                base = self.bot.config.get("xp_base", 100)
                power = self.bot.config.get("xp_power", 1.6)
                gain = math.floor(base * (user.level ** power))
                gain = min(gain, 150)  # kh√¥ng cho qu√° m·∫°nh
                user.xp = (user.xp or 0) + gain

                # streak daily
                last_day = datetime.date.fromtimestamp(user.last_daily or 0)
                today = datetime.date.today()
                if today != last_day:
                    user.streak = (user.streak or 0) + 1
                    user.last_daily = int(now)

                # level up
                req = round(base * (user.level ** power))
                if user.xp >= req and user.level < 100:
                    user.xp -= req
                    user.level += 1
                    await session.commit()
                    await self._announce_level_up(message.author, user.level)
                else:
                    await session.commit()
        except SQLAlchemyError:
            logger.exception("LevelSystem on_message DB error")

        # check achievement auto
        ach = self.bot.get_cog("Achievement")
        if ach:
            await ach.check_unlock(uid)

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        if member.bot or not member.guild:
            return

        uid = member.id
        now = time.time()

        # join
        if after.channel and not before.channel:
            self.voice_start[uid] = now
            return

        # leave
        if before.channel and not after.channel and uid in self.voice_start:
            start = self.voice_start.pop(uid)
            hours = (now - start) / 3600

            try:
                async with self.bot.sessionmaker() as session:
                    user = await session.get(User, uid) or User(id=uid)
                    user.voice_time = (user.voice_time or 0) + hours
                    session.add(user)
                    await session.commit()
            except SQLAlchemyError:
                logger.exception("LevelSystem on_voice DB error")

            # milestone voice
            await self._handle_voice_milestone(member, (user.voice_time or 0))
            # check achievement auto
            ach = self.bot.get_cog("Achievement")
            if ach:
                await ach.check_unlock(uid)

    async def _announce_level_up(self, member: nextcord.Member, new_level: int):
        ch = self.bot.get_channel(self.bot.config.get("levelup_channel", LEVEL_UP_CHANNEL_ID))
        embed = make_embed(
            title="üéâ Level Up!",
            desc=f"{member.mention} ƒë√£ l√™n **Level {new_level}**",
            color=nextcord.Color.gold(),
            timestamp=datetime.datetime.utcnow()
        )
        if ch:
            await ch.send(embed=embed)

        # t·ª± ƒë·ªông g√°n role n·∫øu c·∫ßn (b·∫°n c·∫•u h√¨nh roles_map)
        roles_map = {
            5: "Chatter I", 10: "Chatter II", 20: "Chatter III",
            30: "Chatter IV", 50: "Chatter V", 75: "Chatter VI", 100: "Chatter VII"
        }
        if new_level in roles_map:
            role = nextcord.utils.get(member.guild.roles, name=roles_map[new_level])
            if role:
                await member.add_roles(role)

    async def _handle_voice_milestone(self, member: nextcord.Member, voice_time: float):
        """X·ª≠ l√Ω milestone voice time, th√¥ng b√°o v√† g√°n role n·∫øu c·∫ßn"""
        milestones = {
            10: "Voice Chatter I",
            50: "Voice Chatter II",
            100: "Voice Chatter III",
            200: "Voice Chatter IV",
            500: "Voice Chatter V"
        }
        ch = self.bot.get_channel(self.bot.config.get("levelup_channel", LEVEL_UP_CHANNEL_ID))
        for milestone, role_name in milestones.items():
            # Ki·ªÉm tra n·∫øu voice_time v·ª´a ƒë·∫°t milestone (v√≠ d·ª•: t·ª´ d∆∞·ªõi milestone l√™n >= milestone)
            # ƒê·ªÉ tr√°nh spam, ta c·∫ßn ki·ªÉm tra user ƒë√£ c√≥ role ch∆∞a
            if voice_time >= milestone:
                role = nextcord.utils.get(member.guild.roles, name=role_name)
                if role and role not in member.roles:
                    try:
                        await member.add_roles(role)
                        if ch:
                            embed = make_embed(
                                title="üé§ Voice Milestone!",
                                desc=f"{member.mention} ƒë√£ ƒë·∫°t m·ªëc **{milestone} gi·ªù** trong voice v√† ƒë∆∞·ª£c nh·∫≠n role **{role_name}**!",
                                color=nextcord.Color.blue(),
                                timestamp=datetime.datetime.utcnow()
                            )
                            await ch.send(embed=embed)
                    except Exception as e:
                        logger.error(f"L·ªói khi g√°n role milestone voice: {e}")
                    break

    @commands.command(name="setflex")
    async def set_flex(self, ctx: commands.Context, ach_key: str):
        bot = self.bot
        """üéñÔ∏è !setflex <achievement_key> ‚Äî ch·ªçn Flex Badge hi·ªÉn th·ªã."""
        uid = ctx.author.id
        try:
            # Ki·ªÉm tra user ƒë√£ m·ªü badge ch∆∞a
            async with bot.sessionmaker() as session:
                result = await session.execute(
                    select(UserAchievement)
                    .where(UserAchievement.user_id == uid,
                           UserAchievement.ach_key == ach_key)
                )
                exists = result.scalar_one_or_none() is not None

            if not exists:
                return await ctx.send(embed=make_embed(
                    desc="‚ùå B·∫°n ch∆∞a m·ªü badge n√†y ho·∫∑c nh·∫≠p sai key.",
                    color=nextcord.Color.red()
                ), delete_after=6)

            # L∆∞u badge flex
            async with bot.sessionmaker() as session:
                await session.execute(
                    update(User).where(User.id == uid).values(flex_key=ach_key)
                )
                await session.commit()

            await ctx.send(embed=make_embed(
                desc=f"üéâ ƒê√£ ƒë·∫∑t Flex Badge `{ach_key}`.",
                color=nextcord.Color.green()
            ))

        except Exception:
            logger.exception("‚ùå setflex exception")
            await ctx.send(embed=make_embed(
                desc="‚ùå L·ªói khi ƒë·∫∑t Flex Badge.",
                color=nextcord.Color.red()
            ), delete_after=6)

    @commands.command(name="unsetflex")
    async def unset_flex(self, ctx: commands.Context):
        bot = self.bot
        """‚ùå !unsetflex ‚Äî g·ª° Flex Badge."""
        uid = ctx.author.id
        try:
            async with bot.sessionmaker() as session:
                await session.execute(
                    update(User).where(User.id == uid).values(flex_key=None)
                )
                await session.commit()
            await ctx.send(embed=make_embed(
                desc="‚úÖ ƒê√£ g·ª° Flex Badge.", color=nextcord.Color.green()
            ))
        except SQLAlchemyError:
            logger.exception("unsetflex DB error")
            await ctx.send(embed=make_embed(
                desc="‚ùå L·ªói khi g·ª° flex badge.", color=nextcord.Color.red()
            ), delete_after=5)

def setup(bot: commands.Bot):
    bot.add_cog(LevelSystemCog(bot))